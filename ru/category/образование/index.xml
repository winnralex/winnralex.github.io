<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Образование | A.A.Шуплецов</title>
    <link>https://example.com/ru/category/%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/</link>
      <atom:link href="https://example.com/ru/category/%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/index.xml" rel="self" type="application/rss+xml" />
    <description>Образование</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><lastBuildDate>Sat, 27 May 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Образование</title>
      <link>https://example.com/ru/category/%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/</link>
    </image>
    
    <item>
      <title>Устойчивое развитие.</title>
      <link>https://example.com/ru/post/%D1%83%D1%81%D1%82%D0%BE%D0%B8%D1%87%D0%B8%D0%B2%D0%BE%D0%B5-%D1%80%D0%B0%D0%B7%D0%B2%D0%B8%D1%82%D0%B8%D0%B5/</link>
      <pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/%D1%83%D1%81%D1%82%D0%BE%D0%B8%D1%87%D0%B8%D0%B2%D0%BE%D0%B5-%D1%80%D0%B0%D0%B7%D0%B2%D0%B8%D1%82%D0%B8%D0%B5/</guid>
      <description>&lt;p&gt;Самое лучшее определение устойчивого развития было представлено в отчете «Наше общее будущее» (также известном, как отчет Брандтлэнда):&lt;/p&gt;
&lt;p&gt;«Устойчивое развитие – это развитие, которое отвечает потребностям настоящего без подрыва способности будущих поколений удовлетворять свои потребности».&lt;/p&gt;
&lt;p&gt;Таким образом, устойчивое развитие – это способность удовлетворять потребности настоящего, в то же время, способствуя потребностям будущих поколений.&lt;/p&gt;
&lt;p&gt;Оно сосредоточивается на двух целях.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Повысить качество жизни всех граждан Земли.
Прекратить использование природных ресурсов, превышающее способность окружающей среды поставлять их бесконечно.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Экологическое развитие обычно отличается от устойчивого развития в том, что экологическое развитие отдает предпочтение тому, что его сторонники считают экологической устойчивостью, перед экономическими и культурными соображениями. В дополнение к этому, устойчивое развитие имеет концепции, лежащие в его основе: концепцию «потребностей», в частности, существенные потребности бедного населения мира, которым должно придаваться первостепенное значение; и идею об ограничениях, наложенных состоянием технологической и социальной организации на способность окружающей среды удовлетворять настоящие и будущие потребности. Существует дополнительная сосредоточенность на обязанности настоящего поколения улучшить жизнь будущих поколений путем исправления вреда, нанесенного экосистеме ранее, и сопротивление дальнейшему нанесению вреда экосистеме.&lt;/p&gt;
&lt;p&gt;Устойчивое развитие требует действия со стороны государств, правительств и людей мира. Пагубное положение окружающей среды, огромная нагрузка на наши природные ресурсы и огромный разрыв между развитыми и неразвитыми странами делают необходимым применение практических стратегий для разворота этих тенденций в обратном направлении. Всемирная комиссия по проблемам окружающей среды и развитию предложила семь критических целей для политик по окружающей среде и развитию, которые следуют из концепции устойчивого развития:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;возрождающий рост;
изменение качества роста;
удовлетворение существенных потребностей, таких как работа, пища, энергия, вода и улучшение санитарных условий;
обеспечение устойчивого уровня населения;
сохранение и увеличение ресурсной базы;
переориентация технологии и управление риском;
включение и комбинирование экологических и экономических соображений при выработке решений.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Эти рекомендации все ещё действительны; делать дела иначе – опасно и достойно осуждения. Медленные действия были бы пагубны.&lt;/p&gt;
&lt;p&gt;Источник: &lt;a href=&#34;http://www.delo-angl.ru/anglijskie-teksty-i-stati/anglijskie-teksty-i-statiustoychivoe-razvitie/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.delo-angl.ru/anglijskie-teksty-i-stati/anglijskie-teksty-i-statiustoychivoe-razvitie/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки научного программирования.</title>
      <link>https://example.com/ru/post/science/</link>
      <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/science/</guid>
      <description>&lt;p&gt;Программирование часто упоминают в прикладном контексте. Кажется, с его помощью создают только мобильные приложения, интернет-системы и спецэффекты для кино. Но первоначально программирование предназначалось для решения научных задач. Кроме того, программирование само — наука, узнать о которой будет полезно тем, кто решил связать карьеру с компьютерной разработкой.
Научное программирование — высокоориентированный стиль программирования для научных расчетов. От других видов программирования его отличают предельные корректность и стабильность конечного продукта, строгое разделение научной и интерфейсной частей, индивидуальность алгоритмов, а также преобладание эффективности над универсальностью.&lt;/p&gt;
&lt;p&gt;Научное программирование лежит в основе любого современного глобального исследования. Все передовые технологии — от квантовых компьютеров до космических программ — были бы невозможны без специалистов в области научного программирования, способных предоставить ученым надежный и точный инструмент для совершения открытий.&lt;/p&gt;
&lt;p&gt;Ряд отраслей науки непосредственно зависят от уровня развития научного программирования. Так, своего исполнения ждут беспилотный транспорт, «умные» системы управления городским и сельским хозяйством, фондовыми биржами; ждут робототехника, генная инженерия, искусственный интеллект, превосходящий возможности человека.&lt;/p&gt;
&lt;p&gt;Специализации&lt;/p&gt;
&lt;p&gt;Ученые используют различные языки программирования, выбор которых зависит от типа задачи и предпочтений автора. Исторически первым высокоуровневым языком программирования является Fortran, на нем написано много отлаженных библиотек математической статистики и библиотек для решения дифференциальных уравнений, что актуально для экономики и биологии соответственно.&lt;/p&gt;
&lt;p&gt;Более простым синтаксисом обладает Python, также подходящий для программирования математических вычислений. Язык Python привлекается для обработки данных в математике, физике, экономике, биологии, химии и умеет работать с некоторыми другими «научными» языками: Fortran, C++, C#.&lt;/p&gt;
&lt;p&gt;В свою очередь C# позволяет программировать на платформе .NET, адаптировать программу к общеязыковой исполняющей среде (CLR) и ускорить разработку в рамках оперативных научных сессий.&lt;/p&gt;
&lt;p&gt;Будущее профессии программист-ученый&lt;/p&gt;
&lt;p&gt;Программирование двигает науку, которая двигает технический прогресс. Изобретения, которые считались революционными вчера, в XXI веке служат бытовым потребностям: СВЧ-печь, мобильный телефон, 8-битная домашняя ЭВМ. От программиста-ученого зависит, каких вершин достигнет наука сегодня и какие из них завтра войдут в каждый дом.&lt;/p&gt;
&lt;p&gt;В руках программиста-ученого находятся инструменты не только для развития промышленности, но и для повышения общего качества жизни. Такой специалист увеличивает прогностическую функцию человечества, помогая предугадывать и предотвращать климатические, финансовые, гуманитарные катастрофы.&lt;/p&gt;
&lt;p&gt;Где научиться программированию&lt;/p&gt;
&lt;p&gt;Освоить программирование можно как и где угодно. Специализированная литература, очное обучение, интернет-площадки — все эти ресурсы способны обеспечить начинающего программиста базой знаний, достаточной для самостоятельного творчества и повышения квалификации, в том числе в русле научной разработки.&lt;/p&gt;
&lt;p&gt;Источник: &lt;a href=&#34;https://naked-science.ru/article/media/programmirovanie-v-nauke-aktualnost&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://naked-science.ru/article/media/programmirovanie-v-nauke-aktualnost&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Создание презентаций.</title>
      <link>https://example.com/ru/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/</link>
      <pubDate>Sat, 29 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/</guid>
      <description>&lt;p&gt;Хорошая презентация помогает понять спикера, а плохая лишь нагоняет скуку. Вы знаете это, если защищали диплом в вузе или слушали выступление коллег на совещании. К сожалению, плохих презентаций больше.&lt;/p&gt;
&lt;p&gt;Отличить хорошую презентацию очень просто: она помогает удержать внимание слушателей. В плохой презентации все в кучу: глаза разбегаются по ярким слайдам, мозг пытается обработать текст, а в это время спикер что-то бормочет о своем.&lt;/p&gt;
&lt;p&gt;Чтобы сделать хорошую презентацию, не нужно уметь рисовать, владеть фотошопом и тратить часы на сборку слайдов. Хорошая презентация — это внятное изложение и хорошая подача прежде всего. Это одинаково работает в публичных выступлениях и презентациях на сайтах.&lt;/p&gt;
&lt;p&gt;Хорошая презентация начинается с вопросов самому себе. Самую важную часть вы можете сделать в блокноте, даже не включая компьютер. Сначала вы выбираете тему, определяете цель, распределяете аргументы в нужном порядке. И только теперь можно открыть программу и поискать картинки для презентации.&lt;/p&gt;
&lt;h1 id=&#34;правила-для-создания-хорошей-презентации&#34;&gt;Правила для создания хорошей презентации&lt;/h1&gt;
&lt;h2 id=&#34;1-сформулируйте-тему&#34;&gt;1. Сформулируйте тему&lt;/h2&gt;
&lt;p&gt;Трудно слушать собеседника, который перескакивает с одного на другое, поэтому у презентации должна быть только одна тема. Иначе получится долгий рассказ ни о чем. Тема должна быть достаточно узкой, чтобы в конце предложить решение проблемы. Сужайте тему до тех пор, пока презентацию нельзя будет изложить в десяти коротких пунктах.&lt;/p&gt;
&lt;p&gt;Определить хорошую тему легко — она сама подсказывает структуру выступления.&lt;/p&gt;
&lt;h2 id=&#34;2-определите-цель&#34;&gt;2. Определите цель&lt;/h2&gt;
&lt;p&gt;Хорошая презентация меняет сложившуюся картину мира. Например, люди начинают бережнее относиться к окружающей среде или бегут за новым смартфоном. Цель не обязательно должна быть амбициозной, главное — конкретной.&lt;/p&gt;
&lt;p&gt;Хорошая цель презентации начинается с вопроса: что я хочу изменить в поведении слушателей.&lt;/p&gt;
&lt;h2 id=&#34;3-продумайте-сценарий&#34;&gt;3. Продумайте сценарий&lt;/h2&gt;
&lt;p&gt;Цель презентации — это то, что вы хотите изменить в голове слушателя, а сценарий — это то, как вы к придете к этим изменениям.&lt;/p&gt;
&lt;p&gt;Представьте, что вы сочиняете историю. Слушателя надо заинтриговать, придумать интересного героя, провести его через трудности к успешному финалу. Это и есть базовая структура любого текста и презентации. На такой структуре держатся сказки, сценарии фильмов и реклама продуктов.&lt;/p&gt;
&lt;h2 id=&#34;4-покажите-примеры&#34;&gt;4. Покажите примеры&lt;/h2&gt;
&lt;p&gt;Меньше теории — больше жизни. Показывайте, как работает ваш продукт и как им пользуются люди. Реальные истории людей, скриншоты программ и живые фотографии продукта смотрятся убедительнее, чем сухой текст и фотографии с фотостоков.&lt;/p&gt;
&lt;h2 id=&#34;5-чередуйте-слайды&#34;&gt;5. Чередуйте слайды&lt;/h2&gt;
&lt;p&gt;Презентация — как текст. Если текст состоит из предложений одинаковой длины и одного вида, читать будет скучно. Нет ритма. Поэтому чередуйте текстовые слайды и слайды с изображениями, добавляйте графики. Иногда можно и пошутить.&lt;/p&gt;
&lt;h2 id=&#34;6-скажите-что-делать-дальше&#34;&gt;6. Скажите, что делать дальше&lt;/h2&gt;
&lt;p&gt;Плохое выступление заканчивается так: «Это все, теперь вопросы». Так вы оставляете слушателя наедине с его мыслями.&lt;/p&gt;
&lt;p&gt;Хорошая презентация дает четкую инструкцию, что делать дальше. Это не обязательно призыв к действию. В конце можно еще раз пройтись по выводам, подчеркнуть основной тезис или сказать, где взять дополнительную информацию.&lt;/p&gt;
&lt;p&gt;Заканчивайте инструкцией или выводом.&lt;/p&gt;
&lt;h2 id=&#34;7-меньше-цветов&#34;&gt;7. Меньше цветов&lt;/h2&gt;
&lt;p&gt;В презентации должно быть 1−2 основных цвета. Например, для фона, текста и иконок. Соблюдайте выбранную последовательность и не меняйте цвета без необходимости. Самостоятельно выбрать цвета достаточно сложно, особенно, если вы не дизайнер. Если вы делаете корпоративную презентацию, используйте фирменные цвета.&lt;/p&gt;
&lt;p&gt;Если фирменных цветов нет, воспользуйтесь сайтами по подбору цветов. Там представлены готовые сочетания, на которые приятно смотреть.&lt;/p&gt;
&lt;h2 id=&#34;8-больше-контраста&#34;&gt;8. Больше контраста&lt;/h2&gt;
&lt;p&gt;Белый на голубом может приятно смотреться на вашем компьютере с экраном Retina. Но если придется показывать презентацию через проектор, текст читаться не будет. Поэтому используйте контрастные цвета. Самый большой контраст: черный и белый. Остальные можно проверить с помощью сервиса проверки контрастности.&lt;/p&gt;
&lt;h2 id=&#34;9-меньше-шрифтов&#34;&gt;9. Меньше шрифтов&lt;/h2&gt;
&lt;p&gt;Для создания презентации вполне достаточно одного шрифта. Возьмите современный шрифт без засечек: Open Sans, Roboto, PT Sans (это шрифты можно использовать бесплатно). Это простые шрифты, которые легко читать. Проверить это просто: отойдите от экрана и попробуйте прочитать заголовок. Если читать легко — вы угадали. Акценты можно делать, меняя насыщенность шрифта.&lt;/p&gt;
&lt;h2 id=&#34;10-правило-третей&#34;&gt;10. Правило третей&lt;/h2&gt;
&lt;p&gt;Это правило создания презентаций помогает расположить объекты на слайде так, чтобы глаз сразу выделял самое важное. Разделите слайд на трети вдоль и поперек. Значимые объекты располагайте на пересечениях. Значимые объекты — это заголовки и иллюстрации.&lt;/p&gt;
&lt;h2 id=&#34;11-тексты-короче&#34;&gt;11. Тексты короче&lt;/h2&gt;
&lt;p&gt;Один слайд — одна мысль. Такой слайд легко прочитать и запомнить. Если вы выступаете публично, он будет поддерживать внимание аудитории. Сколько именно текст будет на слайде, зависит от размера аудитории. Если человек читает презентацию на экране, абзац текста его не испугает. Если вы выступаете перед аудиторией в сто человек, читать больше десяти слов на слайде будет уже трудно.&lt;/p&gt;
&lt;h2 id=&#34;12-рассчитайте-сколько-слайдов-должно-быть-в-презентации&#34;&gt;12. Рассчитайте сколько слайдов должно быть в презентации&lt;/h2&gt;
&lt;p&gt;Простое правило, которое можно взять за основу при создании презентаций — один слайд в минуту. Если ваше выступление рассчитано на 30 минут, то оптимальное количество слайдов тоже 30!&lt;/p&gt;
&lt;h2 id=&#34;13-добавьте-изображения&#34;&gt;13. Добавьте изображения&lt;/h2&gt;
&lt;p&gt;Фотографии и иконки помогают раскрыть содержание, но не должны его заменять. Если вы нашли красивую фотографию «в тему», которая не помогает раскрыть мысль, не используйте ее.&lt;/p&gt;
&lt;h2 id=&#34;14-подружите-слайды&#34;&gt;14. Подружите слайды&lt;/h2&gt;
&lt;p&gt;В презентации все элементы должны дружить, то есть быть однотипными. Тогда она воспринимается легко, потому что оправдывает ожидания.&lt;/p&gt;
&lt;p&gt;Сделайте несколько шаблонов для каждого типа слайдов: слайд с текстом, с изображением, графиком. Дальше просто дублируйте слайды и изменяйте только текст и изображения.&lt;/p&gt;
&lt;p&gt;Презентация, где однотипные элементы занимают одно и то же место на каждом слайде, выглядит аккуратно.&lt;/p&gt;
&lt;p&gt;Источник: &lt;a href=&#34;https://tilda.education/articles-how-to-create-presentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tilda.education/articles-how-to-create-presentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Язык разметки Markdown.</title>
      <link>https://example.com/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Markdown, или маркдаун, — это язык разметки для текстовых документов. Он позволяет создавать тексты без использования Word и других редакторов. Разметку можно прочитать и воспроизвести в любой системе или браузере.
Маркдаун создал писатель и блогер Джон Грубер вместе с веб-активистом Аароном Шварцем. Они хотели придумать максимально простой и удобный язык разметки, с помощью которого текст можно перевести в красиво оформленный вид. При этом текст обязан оставаться читаемым даже без приведения к «красивому» виду. Таким и оказался Markdown. Его создали в 2004 году, но наибольшую популярность язык получил сейчас. Его поддерживают разнообразные платформы для блогов, сервисы создания заметок, CMS и даже мессенджеры. Поэтому маркдаун полезно знать всем, кто имеет дело с вебом, от разработчиков до блогеров.
Человек пишет текст в любом редакторе и добавляет в него специальные комбинации стандартных символов. Это разметка, она показывает, где текст должен быть жирным, где — заголовком, а в каком месте нужен список. С помощью символов можно разметить заголовки, выделения текста и даже сложные конструкции вроде таблиц. Специальные преобразователи формируют на основе разметки готовый документ. Это похоже на использование HTML, но маркдаун проще, текст в нем более читаемый. Преобразователи или изначально есть в текстовом редакторе, например в приложении для заметок, или скачиваются отдельно.&lt;/p&gt;
&lt;h2 id=&#34;кто-пользуется-маркдауном&#34;&gt;Кто пользуется маркдауном&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Пользователи интернета, которые общаются в мессенджерах и пишут заметки в сервисах, поддерживающих разметку.
Разработчики, которые пишут с помощью маркдауна документацию для проектов, — им нужен простой и надежный инструмент.
Контент-менеджеры при наполнении сайтов, которые поддерживают маркдаун. Разметка может использоваться и на веб-страницах.
Блогеры, пишущие лонгриды, когда оформляют материалы для статей. Многие платформы для написания текстов поддерживают маркдаун, например Notion.
Писатели и копирайтеры, которым нужен простой инструмент для оформления текста — разметка, читаемая с любого устройства.
Энтузиасты, которые пользуются разметкой в личных целях: пишут заметки и списки дел, ведут дневники или составляют карточки для запоминания.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;для-чего-нужен-маркдаун&#34;&gt;Для чего нужен маркдаун&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Быстрое форматирование статьи для перевода в PDF или чтобы она просто выглядела красиво без лишних усилий.
Верстка текстового документа для размещения на сайте, но без применения HTML.
Написание документации для кода.
Составление заметок в личном цифровом блокноте.
Написание красивых сообщений в мессенджерах.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;правила-разметки&#34;&gt;Правила разметки&lt;/h2&gt;
&lt;p&gt;Основной синтаксис. Он очень простой: текст «оборачивается» в символы или они ставятся перед строкой. Вот так, например, будут выглядеть заголовки.&lt;/p&gt;
&lt;p&gt;· # Заголовок H1 (первого уровня, например название текста)&lt;/p&gt;
&lt;p&gt;· ## Заголовок H2 (второго уровня, заголовки)&lt;/p&gt;
&lt;p&gt;· ### Заголовок H3 (третьего уровня, промежуточные подзаголовки)&lt;/p&gt;
&lt;p&gt;И так далее, вплоть до заголовков шестого уровня с шестью решетками перед строкой. На практике подзаголовки ниже H3 практически не используют.&lt;/p&gt;
&lt;p&gt;В маркдауне можно применить базовое форматирование текста. Буквицу или рукописный шрифт вставить не получится, но выделить важные участки — легко.&lt;/p&gt;
&lt;p&gt;· &lt;em&gt;Курсив&lt;/em&gt; или &lt;em&gt;курсив&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;· &lt;strong&gt;Жирный текст&lt;/strong&gt; или &lt;strong&gt;жирный текст&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;· &lt;em&gt;&lt;strong&gt;Жирный и подчеркнутый текст&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;· &amp;gt; Цитата (угловая скобка ставится перед каждой строкой цитаты)&lt;/p&gt;
&lt;p&gt;· — Пункт маркированного списка&lt;/p&gt;
&lt;p&gt;· 1. Первый пункт нумерованного списка&lt;/p&gt;
&lt;p&gt;· 2. Второй пункт нумерованного списка (и так далее)&lt;/p&gt;
&lt;p&gt;Вставка материалов. Разметка позволяет вставлять в текст разные элементы: ссылки и изображения, которые потом «подтянутся» в документ, когда применится форматирование.&lt;/p&gt;
&lt;p&gt;· [текст_ссылки](любая ссылка) для вставки ссылок&lt;/p&gt;
&lt;p&gt;· [подпись к картинке](ссылка на картинку) для вставки картинок в текст&lt;/p&gt;
&lt;p&gt;· ***, — или ___ — горизонтальная линия на всю строку, которая отделяет часть текста от другой&lt;/p&gt;
&lt;p&gt;А если в тексте должна быть звездочка или любой другой «специальный» символ, который можно прочесть не так, перед ней надо поставить обратный слэш. Например, вот так: *. Тогда символ отобразится в тексте как надо и не считается как правило разметки.&lt;/p&gt;
&lt;p&gt;Расширенный синтаксис. Существует расширенная версия маркдауна. Она называется GFM, GitHub Flavored Markdown. В ней есть другие интересные возможности, например, &lt;del&gt;зачеркнутый текст&lt;/del&gt;, обернутый в две тильды, или &lt;code&gt;короткий кусок кода&lt;/code&gt;. Многострочный блок кода оборачивается в три грависа над верхней и под нижней строкой. Вот так:&lt;/p&gt;
&lt;p&gt;«`&lt;/p&gt;
&lt;p&gt;Здесь будет строка кода.&lt;/p&gt;
&lt;p&gt;И здесь тоже.&lt;/p&gt;
&lt;p&gt;«`&lt;/p&gt;
&lt;p&gt;Можно создавать таблицы, построенные на символах вертикальной и горизонтальной черты. Или «списки дел»:&lt;/p&gt;
&lt;p&gt;— [X] Выполненное дело&lt;/p&gt;
&lt;p&gt;— [ ] Невыполненное дело&lt;/p&gt;
&lt;p&gt;Если редактор поддерживает GFM, то все подобные элементы синтаксиса тоже преобразуются и будут выглядеть как на веб-странице. В нем есть даже эмодзи: нужно просто вставить в текст код нужного смайла, обернутый в двоеточия. Примерно так: 😄. Коды эмодзи есть в открытом доступе, их можно посмотреть в интернете.&lt;/p&gt;
&lt;h2 id=&#34;как-начать-работать-с-маркдауном&#34;&gt;Как начать работать с маркдауном&lt;/h2&gt;
&lt;p&gt;Все очень просто: нужно установить или открыть любой редактор, который поддерживает эту разметку, и начать писать. Есть локальные редакторы, их надо скачивать, а есть те, что работают в браузере через интернет, как веб-сервис. Выбирайте любой, настраивайте под свои нужды и начинайте. Синтаксис простой, его легко выучить. Может быть даже так, что вы уже частично им пользуетесь: например, в мессенджере Telegram для форматирования текста используется именно маркдаун.&lt;/p&gt;
&lt;p&gt;Если вы хотите пользоваться маркдауном не для личных заметок, а для оформления текста в блоге или на сайте, нужно подключить к ним плагин с поддержкой Markdown. Это тоже несложно, такие плагины существуют для многих CMS.&lt;/p&gt;
&lt;p&gt;Маркдаун пригодится и тем, кто планирует карьеру разработчика. Он нужен в контенте, в веб-программировании, в написании документации.
Источник: &lt;a href=&#34;https://blog.skillfactory.ru/glossary/markdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.skillfactory.ru/glossary/markdown/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git.</title>
      <link>https://example.com/ru/post/jupyter/</link>
      <pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/jupyter/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Что такое «система контроля версий» и почему это важно? Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии. Для контроля версий файлов в этой книге в качестве примера будет использоваться исходный код программного обеспечения, хотя на самом деле вы можете использовать контроль версий практически для любых типов файлов.&lt;/p&gt;
&lt;p&gt;Если вы графический или web-дизайнер и хотите сохранить каждую версию изображения или макета (скорее всего, захотите), система контроля версий (далее VCS) — как раз то, что нужно. Она позволяет вернуть файлы к состоянию, в котором они были до изменений, вернуть проект к исходному состоянию, увидеть изменения, увидеть, кто последний менял что-то и вызвал проблему, кто поставил задачу и когда и многое другое. Использование VCS также значит в целом, что, если вы сломали что-то или потеряли файлы, вы спокойно можете всё исправить. В дополнение ко всему вы получите всё это без каких-либо дополнительных усилий.
Многие люди в качестве метода контроля версий применяют копирование файлов в отдельный каталог (возможно даже, каталог с отметкой по времени, если они достаточно сообразительны). Данный подход очень распространён из-за его простоты, однако он невероятно сильно подвержен появлению ошибок. Можно легко забыть в каком каталоге вы находитесь и случайно изменить не тот файл или скопировать не те файлы, которые вы хотели.
Для того, чтобы решить эту проблему, программисты давным-давно разработали локальные VCS с простой базой данных, которая хранит записи о всех изменениях в файлах, осуществляя тем самым контроль ревизий.
Одной из популярных VCS была система RCS, которая и сегодня распространяется со многими компьютерами. RCS хранит на диске наборы патчей (различий между файлами) в специальном формате, применяя которые она может воссоздавать состояние каждого файла в заданный момент времени.
Следующая серьёзная проблема, с которой сталкиваются люди, — это необходимость взаимодействовать с другими разработчиками. Для того, чтобы разобраться с ней, были разработаны централизованные системы контроля версий (Centralized Version Control System, далее CVCS). Такие системы, как CVS, Subversion и Perforce, используют единственный сервер, содержащий все версии файлов, и некоторое количество клиентов, которые получают файлы из этого централизованного хранилища. Применение CVCS являлось стандартом на протяжении многих лет.&lt;/p&gt;
&lt;p&gt;Такой подход имеет множество преимуществ, особенно перед локальными VCS. Например, все разработчики проекта в определённой степени знают, чем занимается каждый из них. Администраторы имеют полный контроль над тем, кто и что может делать, и гораздо проще администрировать CVCS, чем оперировать локальными базами данных на каждом клиенте.&lt;/p&gt;
&lt;p&gt;Несмотря на это, данный подход тоже имеет серьёзные минусы. Самый очевидный минус — это единая точка отказа, представленная централизованным сервером. Если этот сервер выйдет из строя на час, то в течение этого времени никто не сможет использовать контроль версий для сохранения изменений, над которыми работает, а также никто не сможет обмениваться этими изменениями с другими разработчиками. Если жёсткий диск, на котором хранится центральная БД, повреждён, а своевременные бэкапы отсутствуют, вы потеряете всё — всю историю проекта, не считая единичных снимков репозитория, которые сохранились на локальных машинах разработчиков. Локальные VCS страдают от той же самой проблемы: когда вся история проекта хранится в одном месте, вы рискуете потерять всё.
Здесь в игру вступают распределённые системы контроля версий (Distributed Version Control System, далее DVCS). В DVCS (таких как Git, Mercurial, Bazaar или Darcs) клиенты не просто скачивают снимок всех файлов (состояние файлов на определённый момент времени) — они полностью копируют репозиторий. В этом случае, если один из серверов, через который разработчики обменивались данными, умрёт, любой клиентский репозиторий может быть скопирован на другой сервер для продолжения работы. Каждая копия репозитория является полным бэкапом всех данных.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
